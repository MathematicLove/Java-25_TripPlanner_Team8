package org.tripplanner.modules.dialog;

import org.springframework.stereotype.Component;
import org.tripplanner.modules.plannedtrips.PlannedTripsController;
import org.tripplanner.modules.triphelper.TripHelperController;
import org.tripplanner.modules.triphistory.TripHistoryController;

import reactor.core.publisher.Mono;

@Component
public class TelegramBotController {

    private final PlannedTripsController plannedTrips;
    private final TripHelperController tripHelper;
    private final TripHistoryController tripHistory;
    private final DialogState dialogState;

    public TelegramBotController(PlannedTripsController plannedTrips,
                               TripHelperController tripHelper,
                               TripHistoryController tripHistory) {
        this.plannedTrips = plannedTrips;
        this.tripHelper = tripHelper;
        this.tripHistory = tripHistory;
        this.dialogState = new DialogState();
    }

    public Mono<String> handleCommand(Long chatId, String messageText) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
        if (dialogState.isInDialog(chatId)) {
            return handleDialogInput(chatId, messageText);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        String[] parts = messageText.trim().split("\\s+");
        String command = parts[0].toLowerCase();

        return switch (command) {
            case "/showplanned" -> plannedTrips.handleShowPlanned(chatId);

            case "/plantrip" -> {
                dialogState.startDialog(chatId, DialogState.Command.PLAN_TRIP);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/addpoint" -> {
                dialogState.startDialog(chatId, DialogState.Command.ADD_POINT);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/setstartpoint", "/setstartingpoint" -> {
                dialogState.startDialog(chatId, DialogState.Command.SET_START_POINT);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/addroute" -> {
                dialogState.startDialog(chatId, DialogState.Command.ADD_ROUTE);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/finishplanning" -> {
                dialogState.startDialog(chatId, DialogState.Command.FINISH_PLANNING);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/cancelplanning" -> plannedTrips.handleCancelPlanning(chatId);

            case "/deleteplanned" -> {
                if (parts.length < 2) {
                    yield Mono.just("–§–æ—Ä–º–∞—Ç: /deleteplanned <tripId>");
                }
                yield plannedTrips.handleDeletePlanned(chatId, parts[1]);
            }

            case "/showongoingtrip" -> tripHelper.handleShowOngoingTrip(chatId);

            case "/addnote" -> {
                dialogState.startDialog(chatId, DialogState.Command.ADD_NOTE);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/markpoint" -> {
                dialogState.startDialog(chatId, DialogState.Command.MARK_POINT);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/triphistory" -> tripHistory.handleTripHistory(chatId);

            case "/finisheddetails" -> {
                if (parts.length < 2) {
                    yield Mono.just("–§–æ—Ä–º–∞—Ç: /finisheddetails <tripId>");
                }
                yield tripHistory.handleFinishedDetails(parts[1]);
            }

            case "/ratefinished" -> {
                dialogState.startDialog(chatId, DialogState.Command.RATE_FINISHED);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/start" -> plannedTrips.handleStartCommand(chatId);

            case "/help" -> Mono.just(
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                            "\nüìç –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n" +
                            "/showplanned ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏\n" +
                            "/plantrip ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É\n" +
                            "/addpoint ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É\n" +
                            "/setstartpoint –∏–ª–∏ /setstartingpoint ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É\n" +
                            "/addroute ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\n" +
                            "/finishplanning ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
                            "/cancelplanning ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
                            "/deleteplanned <tripId> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É\n" +
                            "\nüó∫ –ü–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–µ–∑–¥–∫–µ:\n" +
                            "/showongoingtrip ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞\n" +
                            "/addnote ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ —Ç–æ—á–∫–µ\n" +
                            "/markpoint ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ—á–∫—É –ø–æ—Å–µ—â—ë–Ω–Ω–æ–π\n" +
                            "\nüìñ –ò—Å—Ç–æ—Ä–∏—è:\n" +
                            "/triphistory ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏\n" +
                            "/finisheddetails <tripId> ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏\n" +
                            "/ratefinished ‚Äî –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"
            );

            default -> Mono.just("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
        };
    }

    private Mono<String> handleDialogInput(Long chatId, String input) {
        DialogState.CommandState state = dialogState.getState(chatId);
        if (state == null) {
            return Mono.just("–û—à–∏–±–∫–∞: –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if (!dialogState.validateInput(chatId, input)) {
            return Mono.just(dialogState.getErrorMessage(chatId));
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        switch (state.currentStep) {
            case WAITING_NAME -> dialogState.setData(chatId, "name", input);
            case WAITING_START_DATE -> dialogState.setData(chatId, "startDate", input);
            case WAITING_END_DATE -> dialogState.setData(chatId, "endDate", input);
            case WAITING_POINT_NAME -> dialogState.setData(chatId, "pointName", input);
            case WAITING_LATITUDE -> dialogState.setData(chatId, "latitude", input);
            case WAITING_LONGITUDE -> dialogState.setData(chatId, "longitude", input);
            case WAITING_TRIP_NAME -> dialogState.setData(chatId, "tripName", input);
            case WAITING_POINT_ID -> dialogState.setData(chatId, "pointId", input);
            case WAITING_ROUTE_DATE -> dialogState.setData(chatId, "routeDate", input);
            case WAITING_NOTE -> dialogState.setData(chatId, "note", input);
            case WAITING_RATING -> dialogState.setData(chatId, "rating", input);
            case WAITING_POINT_COORDINATES -> dialogState.setData(chatId, "coordinates", input);
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        dialogState.nextStep(chatId);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        DialogState.CommandState nextState = dialogState.getState(chatId);
        if (nextState == null || nextState.currentStep == null) {
            // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
            return executeCommand(chatId, state.command)
                    .doFinally(signalType -> dialogState.endDialog(chatId));
        }

        // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        return Mono.just(dialogState.getPrompt(chatId));
    }

    private Mono<String> executeCommand(Long chatId, DialogState.Command command) {
        return switch (command) {
            case PLAN_TRIP -> {
                String name = (String) dialogState.getData(chatId, "name");
                String startDate = (String) dialogState.getData(chatId, "startDate");
                String endDate = (String) dialogState.getData(chatId, "endDate");
                yield plannedTrips.handlePlanTrip(chatId, name, startDate, endDate);
            }
            case ADD_POINT -> {
                String pointName = (String) dialogState.getData(chatId, "pointName");
                double latitude = Double.parseDouble((String) dialogState.getData(chatId, "latitude"));
                double longitude = Double.parseDouble((String) dialogState.getData(chatId, "longitude"));
                yield plannedTrips.handleAddPoint(String.valueOf(chatId), pointName, latitude, longitude);
            }
            case SET_START_POINT -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                String coordinates = (String) dialogState.getData(chatId, "coordinates");
                String[] parts = coordinates.split(",");
                double latitude = Double.parseDouble(parts[0].trim());
                double longitude = Double.parseDouble(parts[1].trim());
                yield plannedTrips.handleSetStartPoint(tripName, latitude, longitude)
                        .map(trip -> "‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
            }
            case ADD_ROUTE -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                String pointId = (String) dialogState.getData(chatId, "pointId");
                String routeDate = (String) dialogState.getData(chatId, "routeDate");
                yield plannedTrips.handleAddRoute(tripName, pointId, routeDate);
            }
            case FINISH_PLANNING -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                yield plannedTrips.handleFinishPlanning(chatId)
                        .then(Mono.just("–†–∞–¥ —á—Ç–æ –í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏! –ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –æ —Å–≤–æ–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ —Å –ø–æ–º–æ—â—å—é /addnote"));
            }
            case ADD_NOTE -> {
                String pointId = (String) dialogState.getData(chatId, "pointId");
                String note = (String) dialogState.getData(chatId, "note");
                yield tripHelper.handleAddNote(pointId, note);
            }
            case MARK_POINT -> {
                String pointId = (String) dialogState.getData(chatId, "pointId");
                yield tripHelper.handleMarkPoint(pointId);
            }
            case RATE_FINISHED -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                int rating = Integer.parseInt((String) dialogState.getData(chatId, "rating"));
                yield tripHistory.handleRateFinished(tripName, rating);
            }
        };
    }
}
