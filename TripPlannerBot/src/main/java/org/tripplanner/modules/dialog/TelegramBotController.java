package org.tripplanner.modules.dialog;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.tripplanner.modules.plannedtrips.PlannedTripsController;
import org.tripplanner.modules.triphelper.TripHelperController;
import org.tripplanner.modules.triphelper.TripHelperService;
import org.tripplanner.modules.triphistory.TripHistoryController;
import org.tripplanner.repositories.UserDAO;

import reactor.core.publisher.Mono;

@Component
public class TelegramBotController {

    private final PlannedTripsController plannedTrips;
    private final TripHelperController tripHelper;
    private final TripHistoryController tripHistory;
    private final TripHelperService tripHelperService;
    private final DialogState dialogState;
    private final UserDAO userDAO;
    private static final Logger logger = LoggerFactory.getLogger(TelegramBotController.class);

    public TelegramBotController(PlannedTripsController plannedTrips,
                               TripHelperController tripHelper,
                               TripHistoryController tripHistory,
                               TripHelperService tripHelperService,
                               DialogState dialogState,
                               UserDAO userDAO) {
        this.plannedTrips = plannedTrips;
        this.tripHelper = tripHelper;
        this.tripHistory = tripHistory;
        this.tripHelperService = tripHelperService;
        this.dialogState = dialogState;
        this.userDAO = userDAO;
    }

    public Mono<String> handleCommand(Long chatId, String messageText) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
        if (dialogState.isInDialog(chatId)) {
            DialogState.CommandState state = dialogState.getState(chatId);
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ - WAITING_LOCATION, —Ç–æ —ç—Ç–æ –Ω–µ –¥–∏–∞–ª–æ–≥, –∞ —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            if (state != null && state.currentStep == DialogState.Step.WAITING_LOCATION) {
                dialogState.endDialog(chatId);
            } else {
                return handleDialogInput(chatId, messageText);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        String[] parts = messageText.trim().split("\\s+");
        String command = parts[0].toLowerCase();

        return switch (command) {
            case "/showplanned" -> plannedTrips.handleShowPlanned(chatId);

            case "/plantrip" -> {
                dialogState.startDialog(chatId, DialogState.Command.PLAN_TRIP);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/addpoint" -> {
                dialogState.startDialog(chatId, DialogState.Command.ADD_POINT);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/addroute" -> {
                dialogState.startDialog(chatId, DialogState.Command.ADD_ROUTE);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/finishplanning" -> {
                dialogState.startDialog(chatId, DialogState.Command.FINISH_PLANNING);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/deleteplanned" -> {
                dialogState.startDialog(chatId, DialogState.Command.DELETE_PLANNED);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/showongoingtrip" -> tripHelper.handleShowOngoingTrip(chatId);

            case "/addnote" -> {
                dialogState.startDialog(chatId, DialogState.Command.ADD_NOTE);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/markpoint" -> {
                dialogState.startDialog(chatId, DialogState.Command.MARK_POINT);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/triphistory" -> tripHistory.handleTripHistory(chatId);

            case "/finisheddetails" -> {
                if (parts.length < 2) {
                    yield tripHistory.handleFinishedDetails(chatId, null);
                }
                yield tripHistory.handleFinishedDetails(chatId, parts[1]);
            }

            case "/ratefinished" -> {
                dialogState.startDialog(chatId, DialogState.Command.RATE_FINISHED);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/setongoing" -> {
                dialogState.startDialog(chatId, DialogState.Command.SET_ONGOING);
                yield Mono.just(dialogState.getPrompt(chatId));
            }

            case "/startontrip" -> {
                dialogState.startDialog(chatId, DialogState.Command.SET_ONGOING);
                yield plannedTrips.handleFinishPlanning(chatId)
                    .flatMap(response -> {
                        if (response.contains("–Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫")) {
                            return Mono.just("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–µ–∑–¥–∫—É —Å –ø–æ–º–æ—â—å—é /plantrip");
                        }
                        return Mono.just("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.");
                    });
            }

            case "/start" -> plannedTrips.handleStartCommand(chatId);

            case "/help" -> Mono.just(
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                            "\nüìç –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n" +
                            "/showplanned ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏\n" +
                            "/plantrip ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É\n" +
                            "/addpoint ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É\n" +
                            "/addroute ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç\n" +
                            "/finishplanning ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
                            "/deleteplanned ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É\n" +
                            "\nüó∫ –ü–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–µ–∑–¥–∫–µ:\n" +
                            "/showongoingtrip ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞\n" +
                            "/addnote ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ —Ç–æ—á–∫–µ\n" +
                            "/markpoint ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ—á–∫—É –ø–æ—Å–µ—â—ë–Ω–Ω–æ–π\n" +
                            "/setongoing ‚Äî –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏\n" +
                            "\nüìñ –ò—Å—Ç–æ—Ä–∏—è:\n" +
                            "/triphistory ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏\n" +
                            "/finisheddetails ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏\n" +
                            "/ratefinished ‚Äî –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"
            );

            default -> Mono.just("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
        };
    }

    public Mono<String> handleDialogInput(Long chatId, String input) {
        DialogState.CommandState state = dialogState.getState(chatId);
        if (state == null) {
            return Mono.just("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
        }

        // Validate input
        String validationError = dialogState.validateInput(chatId, input);
        if (validationError != null) {
            return Mono.just(validationError);
        }

        // Save input data
        if (state.currentStep == DialogState.Step.WAITING_RATING) {
            try {
                int rating = Integer.parseInt(input);
                if (rating < 1 || rating > 5) {
                    return Mono.just("–û—à–∏–±–∫–∞: –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5");
                }
                dialogState.setData(chatId, "rating", rating);
            } catch (NumberFormatException e) {
                return Mono.just("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5");
            }
        } else if (state.currentStep == DialogState.Step.WAITING_TRIP_NAME) {
            dialogState.setData(chatId, "tripName", input);
        } else if (state.currentStep == DialogState.Step.WAITING_NOTE) {
            dialogState.setData(chatId, "note", input);
        } else {
            String key;
            switch (state.currentStep) {
                case WAITING_NAME -> key = "name";
                case WAITING_START_DATE -> key = "startDate";
                case WAITING_END_DATE -> key = "endDate";
                case WAITING_LATITUDE -> key = "latitude";
                case WAITING_LONGITUDE -> key = "longitude";
                case WAITING_POINT_NAME -> key = "pointName";
                case WAITING_ROUTE_DATE -> key = "routeDate";
                default -> key = state.currentStep.toString().toLowerCase();
            }
            dialogState.setData(chatId, key, input);
        }

        // Get next step
        DialogState.Step nextStep = dialogState.getNextStep(state.command, state.currentStep);

        if (nextStep == null) {
            // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
            return executeCommand(chatId, state.command, input)
                    .doFinally(signalType -> dialogState.endDialog(chatId));
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        state.currentStep = nextStep;

        // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        return Mono.just(dialogState.getPrompt(chatId));
    }

    private Mono<String> executeCommand(Long chatId, DialogState.Command command, String messageText) {
        return switch (command) {
            case PLAN_TRIP -> {
                String name = (String) dialogState.getData(chatId, "name");
                String startDate = (String) dialogState.getData(chatId, "startDate");
                String endDate = (String) dialogState.getData(chatId, "endDate");
                yield plannedTrips.handlePlanTrip(chatId, name, startDate, endDate);
            }
            case ADD_POINT -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                String pointName = (String) dialogState.getData(chatId, "pointName");
                double latitude = Double.parseDouble((String) dialogState.getData(chatId, "latitude"));
                double longitude = Double.parseDouble((String) dialogState.getData(chatId, "longitude"));
                yield plannedTrips.handleAddPoint(chatId, tripName, pointName, latitude, longitude);
            }
            case ADD_ROUTE -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                String pointName = (String) dialogState.getData(chatId, "pointName");
                String routeDate = (String) dialogState.getData(chatId, "routeDate");
                yield plannedTrips.handleAddRoute(chatId, tripName, pointName, routeDate);
            }
            case FINISH_PLANNING -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                if (tripName == null) {
                    yield plannedTrips.handleFinishPlanning(chatId);
                } else {
                    yield plannedTrips.handleFinishPlanningWithName(chatId, tripName)
                            .then(Mono.just("–†–∞–¥ —á—Ç–æ –í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏! –ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –æ —Å–≤–æ–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ —Å –ø–æ–º–æ—â—å—é /addnote"));
                }
            }
            case ADD_NOTE -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                String note = (String) dialogState.getData(chatId, "note");
                yield tripHelper.handleAddNote(chatId, tripName, note);
            }
            case MARK_POINT -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                String pointName = (String) dialogState.getData(chatId, "pointName");
                if (tripName == null) {
                    dialogState.setData(chatId, "tripName", messageText);
                    yield Mono.just("–ö–∞–∫—É—é —Ç–æ—á–∫—É –≤—ã –ø–æ—Å–µ—Ç–∏–ª–∏?");
                } else if (pointName == null) {
                    dialogState.setData(chatId, "pointName", messageText);
                    yield tripHelperService.markPointVisited(chatId, tripName, messageText)
                            .map(point -> "–¢–æ—á–∫–∞ '" + point.getName() + "' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–∞—è")
                            .onErrorResume(e -> {
                                if (e.getMessage().contains("–ü–æ–µ–∑–¥–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º")) {
                                    return Mono.just("–£–ø—Å! –ù–µ –Ω–∞—à–ª–æ—Å—å —Ç–∞–∫–æ–π –ø–æ–µ–∑–¥–∫–∏. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–µ–∑–¥–æ–∫: /showplanned");
                                } else if (e.getMessage().contains("–¢–æ—á–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º")) {
                                    return Mono.just("–£–ø—Å! –ù–µ –Ω–∞—à–ª–æ—Å—å —Ç–∞–∫–æ–π —Ç–æ—á–∫–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É: /addpoint");
                                }
                                return Mono.just("–û—à–∏–±–∫–∞: " + e.getMessage());
                            })
                            .doFinally(signalType -> dialogState.endDialog(chatId));
                } else {
                    yield tripHelperService.markPointVisited(chatId, tripName, pointName)
                            .map(point -> "–¢–æ—á–∫–∞ '" + point.getName() + "' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–∞—è")
                            .onErrorResume(e -> {
                                if (e.getMessage().contains("–ü–æ–µ–∑–¥–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º")) {
                                    return Mono.just("–£–ø—Å! –ù–µ –Ω–∞—à–ª–æ—Å—å —Ç–∞–∫–æ–π –ø–æ–µ–∑–¥–∫–∏. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–µ–∑–¥–æ–∫: /showplanned");
                                } else if (e.getMessage().contains("–¢–æ—á–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º")) {
                                    return Mono.just("–£–ø—Å! –ù–µ –Ω–∞—à–ª–æ—Å—å —Ç–∞–∫–æ–π —Ç–æ—á–∫–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É: /addpoint");
                                }
                                return Mono.just("–û—à–∏–±–∫–∞: " + e.getMessage());
                            })
                            .doFinally(signalType -> dialogState.endDialog(chatId));
                }
            }
            case RATE_FINISHED -> {
                DialogState.CommandState commandState = dialogState.getState(chatId);
                if (commandState == null || commandState.currentStep == null) {
                    // –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
                    yield tripHistory.handleTripHistory(chatId)
                            .flatMap(response -> {
                                if (response.contains("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫")) {
                                    return Mono.just(response);
                                }
                                return Mono.just("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö:");
                            });
                } else if (commandState.currentStep == DialogState.Step.WAITING_TRIP_NAME) {
                    String tripName = (String) dialogState.getData(chatId, "tripName");
                    if (tripName == null || tripName.isEmpty()) {
                        yield Mono.just("–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                    }
                    dialogState.nextStep(chatId);
                    yield Mono.just("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5):");
                } else if (commandState.currentStep == DialogState.Step.WAITING_RATING) {
                    String tripName = (String) dialogState.getData(chatId, "tripName");
                    Object ratingObj = dialogState.getData(chatId, "rating");
                    
                    if (ratingObj == null) {
                        yield Mono.just("–û—à–∏–±–∫–∞: –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞");
                    }
                    
                    int rating = (Integer) ratingObj;
                    yield tripHistory.handleRateFinished(chatId, tripName, rating)
                            .doFinally(signalType -> dialogState.endDialog(chatId));
                }
                yield Mono.just("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–µ–∑–¥–∫–∏");
            }
            case DELETE_PLANNED -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                yield plannedTrips.handleDeletePlanned(chatId, tripName);
            }
            case SET_ONGOING -> {
                String tripName = (String) dialogState.getData(chatId, "tripName");
                yield plannedTrips.handleFinishPlanningWithName(chatId, tripName)
                    .flatMap(trip -> {
                        if (trip == null) {
                            return Mono.just("–¢–∞–∫–æ–π –ø–æ–µ–∑–¥–∫–∏ –Ω–µ—Ç! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å: /plantrip –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–µ–∑–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é: /showplanned");
                        }
                        return userDAO.setOngoingTrip(chatId, trip.getId())
                            .then(Mono.just("–ü–æ–µ–∑–¥–∫–∞ \"" + trip.getName() + "\" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'."));
                    })
                    .switchIfEmpty(Mono.just("–¢–∞–∫–æ–π –ø–æ–µ–∑–¥–∫–∏ –Ω–µ—Ç! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å: /plantrip –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–µ–∑–¥–∫–∏ —Å –ø–æ–º–æ—â—å—é: /showplanned"))
                    .doFinally(signalType -> dialogState.endDialog(chatId));
            }
            default -> Mono.just("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        };
    }

    public Mono<String> handleLocation(Long chatId, double latitude, double longitude) {
        return tripHelper.handleLocationUpdate(chatId, latitude, longitude)
            .then(Mono.just("–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞."))
            .onErrorResume(e -> {
                logger.error("Error handling location update for chat {}: {}", chatId, e.getMessage());
                return Mono.just("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            })
            .doFinally(signalType -> {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
                dialogState.endDialog(chatId);
            });
    }
}
